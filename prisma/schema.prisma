generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  firstName             String?
  lastName              String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(STUDENT)
  isActive              Boolean                @default(true)
  deactivatedAt         DateTime?
  isTwoFactorEnabled    Boolean                @default(false)
  isDeleted             Boolean                @default(false)
  phone                 String?                @unique
  phoneVerified         DateTime?
  accounts              Account[]
  FailedLoginAttempt    FailedLoginAttempt[]
  notifications         Notification[]
  parentProfiles        ParentProfile[]
  pushDeviceTokens      PushDeviceToken[]
  sessions              Session[]
  studentProfiles       StudentProfile[]
  teacherProfiles       TeacherProfile[]
  twoFactorConfirmation TwoFactorConfirmation?
  userDevices           UserDevice[]
  userSchools           UserSchool[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                  String   @id @default(cuid())
  userId              String
  sessionToken        String   @unique
  refreshToken        String   @unique
  expires             DateTime
  refreshTokenExpires DateTime
  lastActivity        DateTime
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  userId  String?
  token   String   @unique
  expires DateTime
  tokenId String   @unique

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  tokenId String   @unique

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FailedLoginAttempt {
  id        String   @id @default(cuid())
  userId    String
  attemptAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserDevice {
  id        String   @id @default(cuid())
  userId    String
  device    String?
  os        String?
  browser   String?
  ipAddress String?
  latitude  Float?
  longitude Float?
  city      String?
  country   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id          String    @id @default(cuid())
  type        String
  payload     Json
  status      String    @default("PENDING")
  attempts    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}

model Setting {
  id             String   @id @default(cuid())
  key            String   @unique
  value          String
  description    String?
  isCustomizable Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("settings")
}

model AdminOverrideLog {
  id         String   @id @default(cuid())
  adminId    String?
  targetUser String
  ipAddress  String?
  createdAt  DateTime @default(now())
}

model School {
  id                  String                @id @default(cuid())
  name                String
  code                String
  address             String?
  phone               String?
  email               String?
  logoUrl             String?
  websiteUrl          String?
  slogan              String?
  brandPrimaryColor   String?
  brandSecondaryColor String?
  isActive            Boolean               @default(true)
  isDeleted           Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  academicYears       AcademicYear[]
  assessmentTypes     AssessmentTypeModel[]
  assessments         Assessment[]
  classrooms          Classroom[]
  classroomSubjects   ClassroomSubject[]
  feeSchedules        FeeSchedule[]
  gradeLevels         GradeLevel[]
  gradeLevelSubjects  GradeLevelSubject[]
  notifications       Notification[]
  parentProfiles      ParentProfile[]
  Payment             Payment[]
  settings            SchoolSetting[]
  studentProfiles     StudentProfile[]
  subjects            Subject[]
  SubjectCategory     SubjectCategory[]
  teacherProfiles     TeacherProfile[]
  userSchools         UserSchool[]

  @@unique([code, isDeleted])
}

model UserSchool {
  id        String   @id @default(cuid())
  userId    String
  schoolId  String
  role      UserRole
  createdAt DateTime @default(now())
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, schoolId])
  @@index([schoolId])
}

model AcademicYear {
  id                 String              @id @default(cuid())
  schoolId           String
  name               String
  startDate          DateTime
  endDate            DateTime
  isActive           Boolean             @default(false)
  school             School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  enrollments        Enrollment[]
  teacherAssignments TeacherAssignment[]
  terms              Term[]
  TimetableEntry     TimetableEntry[]

  @@index([schoolId])
}

model Term {
  id             String        @id @default(cuid())
  academicYearId String
  name           String
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  assessments    Assessment[]
  feeSchedules   FeeSchedule[]
  reportCards    ReportCard[]
  academicYear   AcademicYear  @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
}

model GradeLevel {
  id                 String              @id @default(cuid())
  schoolId           String
  name               String
  description        String?
  category           SchoolCategory      @default(COLLEGE)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  classrooms         Classroom[]
  feeSchedules       FeeSchedule[]
  school             School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  gradeLevelSubjects GradeLevelSubject[]

  @@unique([schoolId, name])
  @@index([schoolId])
  @@index([schoolId, category])
}

model Classroom {
  id                 String              @id @default(cuid())
  schoolId           String
  gradeLevelId       String
  name               String
  description        String?
  createdAt          DateTime            @default(now())
  headTeacherId      String?
  room               String?
  updatedAt          DateTime            @updatedAt
  assessments        Assessment[]
  gradeLevel         GradeLevel          @relation(fields: [gradeLevelId], references: [id], onDelete: Cascade)
  headTeacher        TeacherProfile?     @relation("ClassroomHeadTeacher", fields: [headTeacherId], references: [id])
  school             School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classroomSubjects  ClassroomSubject[]
  enrollments        Enrollment[]
  feeSchedules       FeeSchedule[]
  teacherAssignments TeacherAssignment[]
  timetable          TimetableEntry[]

  @@unique([schoolId, name])
  @@index([schoolId])
}

model Subject {
  id                 String              @id @default(cuid())
  schoolId           String
  name               String
  description        String?
  categoryId         String?
  assessments        Assessment[]
  classroomSubjects  ClassroomSubject[]
  gradeLevelSubjects GradeLevelSubject[]
  category           SubjectCategory?    @relation(fields: [categoryId], references: [id])
  school             School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teacherAssignments TeacherAssignment[]
  timetable          TimetableEntry[]
  teacherProfiles    TeacherProfile[]    @relation("TeacherSubjects")

  @@unique([schoolId, name])
  @@index([schoolId])
}

model SubjectCategory {
  id          String    @id @default(cuid())
  schoolId    String
  name        String
  description String?
  subjects    Subject[]
  school      School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, name])
  @@index([schoolId])
}

model ClassroomSubject {
  id          String    @id @default(cuid())
  schoolId    String
  classroomId String
  subjectId   String
  coefficient Float     @default(1)
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  school      School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subject     Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([classroomId, subjectId])
  @@index([schoolId])
}

model GradeLevelSubject {
  id           String     @id @default(cuid())
  schoolId     String
  gradeLevelId String
  subjectId    String
  coefficient  Float      @default(1)
  gradeLevel   GradeLevel @relation(fields: [gradeLevelId], references: [id], onDelete: Cascade)
  school       School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subject      Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([gradeLevelId, subjectId])
  @@index([schoolId])
}

model TeacherProfile {
  id                 String              @id @default(cuid())
  userId             String
  schoolId           String
  bio                String?
  address            String?
  bloodType          String?
  dateOfBirth        DateTime?
  emergencyContact   String?
  emergencyPhone     String?
  employeeNumber     String?
  experienceYears    Int?
  gender             String?
  hireDate           DateTime?
  nationality        String?
  placeOfBirth       String?
  qualification      String?
  salary             Int?
  specialization     String?
  status             String?             @default("ACTIVE")
  assessments        Assessment[]        @relation("AssessmentCreatedBy")
  attendanceRecorded AttendanceRecord[]  @relation("RecordedByTeacher")
  headOfClassrooms   Classroom[]         @relation("ClassroomHeadTeacher")
  assignments        TeacherAssignment[]
  school             School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  timetable          TimetableEntry[]
  subjects           Subject[]           @relation("TeacherSubjects")

  @@unique([userId, schoolId])
  @@index([schoolId])
}

model StudentProfile {
  id               String             @id @default(cuid())
  userId           String
  schoolId         String
  matricule        String?
  gender           String?
  dateOfBirth      DateTime?
  medicalInfo      String?
  address          String?
  bloodType        String?
  emergencyContact String?
  emergencyPhone   String?
  enrollmentDate   DateTime?
  nationality      String?
  placeOfBirth     String?
  previousSchool   String?
  status           String?            @default("ACTIVE")
  studentNumber    String?
  attendance       AttendanceRecord[]
  enrollments      Enrollment[]
  parentLinks      ParentStudent?
  payments         Payment[]
  reportCards      ReportCard[]
  grades           StudentGrade[]
  school           School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, schoolId])
  @@index([schoolId])
}

model ParentProfile {
  id                String          @id @default(cuid())
  userId            String
  schoolId          String
  phone             String?
  address           String?
  preferredLanguage String?
  profession        String?
  workplace         String?
  school            School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  children          ParentStudent[]

  @@unique([userId, schoolId])
  @@index([schoolId])
}

model ParentStudent {
  id               String         @id @default(cuid())
  parentProfileId  String
  studentProfileId String         @unique
  relationship     String?
  parent           ParentProfile  @relation(fields: [parentProfileId], references: [id], onDelete: Cascade)
  student          StudentProfile @relation(fields: [studentProfileId], references: [id], onDelete: Cascade)

  @@unique([parentProfileId, studentProfileId])
}

model Enrollment {
  id                 String         @id @default(cuid())
  studentId          String
  classroomId        String
  academicYearId     String
  enrolledAt         DateTime       @default(now())
  status             String         @default("ACTIVE")
  // Abonnement mobile pour l'application parent sur cette inscription (annuel)
  isMobileSubscribed Boolean        @default(false)
  academicYear       AcademicYear   @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  classroom          Classroom      @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  student            StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, classroomId, academicYearId])
}

model TeacherAssignment {
  id             String         @id @default(cuid())
  teacherId      String
  subjectId      String
  classroomId    String
  academicYearId String
  academicYear   AcademicYear   @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  classroom      Classroom      @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  subject        Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher        TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, subjectId, classroomId, academicYearId])
}

model TimetableEntry {
  id                String             @id @default(cuid())
  classroomId       String
  subjectId         String
  teacherId         String
  dayOfWeek         DayOfWeek
  startTime         DateTime
  endTime           DateTime
  academicYearId    String
  attendanceRecords AttendanceRecord[] @relation("AttendanceTimetableEntry")
  academicYear      AcademicYear       @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  classroom         Classroom          @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  subject           Subject            @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher           TeacherProfile     @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([classroomId])
  @@index([academicYearId])
}

model AttendanceRecord {
  id               String           @id @default(cuid())
  studentId        String
  date             DateTime
  status           AttendanceStatus
  recordedById     String?
  timetableEntryId String?
  notes            String?
  recordedBy       TeacherProfile?  @relation("RecordedByTeacher", fields: [recordedById], references: [id])
  student          StudentProfile   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  timetableEntry   TimetableEntry?  @relation("AttendanceTimetableEntry", fields: [timetableEntryId], references: [id])

  @@unique([studentId, date, timetableEntryId])
  @@index([date])
}

model Assessment {
  id               String               @id @default(cuid())
  schoolId         String
  subjectId        String
  classroomId      String
  termId           String
  createdById      String
  title            String
  description      String?
  type             AssessmentType
  // Phase 1: champs dynamiques et relation vers AssessmentType
  assessmentTypeId String?
  assessmentType   AssessmentTypeModel? @relation(fields: [assessmentTypeId], references: [id])
  maxScore         Float                @default(20)
  isBlocked        Boolean              @default(false)
  assignedAt       DateTime             @default(now())
  dueAt            DateTime?
  classroom        Classroom            @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  createdBy        TeacherProfile       @relation("AssessmentCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  school           School               @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subject          Subject              @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  term             Term                 @relation(fields: [termId], references: [id], onDelete: Cascade)
  grades           StudentGrade[]

  @@index([schoolId])
}

/// Types d'évaluation dynamiques par école (Phase 1)
model AssessmentTypeModel {
  id                 String       @id @default(cuid())
  schoolId           String
  name               String
  code               String?
  defaultMaxScore    Float        @default(20)
  defaultCoefficient Float        @default(1)
  isActive           Boolean      @default(true)
  order              Int?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  school             School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  assessments        Assessment[]

  @@unique([schoolId, name])
  @@unique([schoolId, code])
  @@index([schoolId])
  @@map("assessment_types")
}

model StudentGrade {
  id           String         @id @default(cuid())
  assessmentId String
  studentId    String
  score        Float
  createdAt    DateTime       @default(now())
  assessment   Assessment     @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  student      StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, studentId])
}

model ReportCard {
  id             String         @id @default(cuid())
  studentId      String
  termId         String
  pdfUrl         String?
  generatedAt    DateTime       @default(now())
  signedBy       String?
  signatureStamp String?
  student        StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  term           Term           @relation(fields: [termId], references: [id], onDelete: Cascade)

  @@unique([studentId, termId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  schoolId  String
  title     String
  body      String
  type      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([schoolId])
}

model PushDeviceToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  platform  String?
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FeeSchedule {
  id               String        @id @default(cuid())
  schoolId         String
  gradeLevelId     String?
  classroomId      String?
  termId           String?
  itemName         String
  amountCents      Int
  dueDate          DateTime?
  createdAt        DateTime      @default(now())
  installmentOrder Int?
  isInstallment    Boolean       @default(false)
  parentFeeId      String?
  updatedAt        DateTime      @default(now()) @updatedAt
  classroom        Classroom?    @relation(fields: [classroomId], references: [id])
  gradeLevel       GradeLevel?   @relation(fields: [gradeLevelId], references: [id])
  parentFee        FeeSchedule?  @relation("FeeInstallments", fields: [parentFeeId], references: [id], onDelete: Cascade)
  installments     FeeSchedule[] @relation("FeeInstallments")
  school           School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  term             Term?         @relation(fields: [termId], references: [id])
  payments         Payment[]

  @@index([schoolId])
  @@index([parentFeeId])
}

model Payment {
  id            String         @id @default(cuid())
  amountCents   Int
  paidAt        DateTime       @default(now())
  reference     String?
  createdAt     DateTime       @default(now())
  dueDate       DateTime?
  feeScheduleId String
  notes         String?
  schoolId      String
  studentId     String
  method        PaymentMethod  @default(CASH)
  feeSchedule   FeeSchedule    @relation(fields: [feeScheduleId], references: [id], onDelete: Cascade)
  school        School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student       StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([schoolId])
  @@index([studentId])
  @@index([feeScheduleId])
}

model SchoolSetting {
  id        String   @id @default(cuid())
  schoolId  String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, key])
}

enum UserRole {
  ADMIN
  STUDENT
  TEACHER
  PARENT
  SUPER_ADMIN
}

enum SchoolCategory {
  COLLEGE
  LYCEE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  EXPELLED
  SICK
  LATE
}

enum AssessmentType {
  HOMEWORK
  QUIZ
  EXAM
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  MOBILE_MONEY
  CHECK
  CARD
}
